services:
  db:
    image: postgres
    restart: always
    container_name: dbPostgres
    secrets:
      - db-password
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-q",
          "-d",
          "api",
          "-U",
          "postgres"
        ]
      interval: 3s
      retries: 5
      start_period: 30s
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - backnet
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_DB=api
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    ports:
      - 5432:5432
    expose:
      - 5432

  adminer:
    image: adminer
    restart: always
    container_name: adminer
    ports:
      - 8080:8080
    networks:
      - backnet

  frontend:
    build:
      context: SOGAP-React
      target: frontend
    container_name: frontend
    restart: always
    command: "npm start --host 0.0.0.0 --port 3000 --disableHostCheck true"
    working_dir: /code
    user: "node"
    environment:
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./SOGAP-React:/code:delegated
      - /code/node_modules
    ports:
      - 3000:3000
    expose:
      - 3000
    networks:
      - backnet


#  frontend:
#    image: node:20-alpine
#    restart: always
#    command: "npm start"
#    container_name: frontend
#    user: "node"
#    working_dir: /home/node/app
#    environment:
#      - NODE_ENV=production
#    volumes:
#      - ./SOGAP-React:/home/node/app
#    networks:
#      - backnet

  myapp:
    build:
      context: SOGAP-Process-Service
      target: builder
    working_dir: /code
    container_name: processBack
    volumes:
      - ./SOGAP-Process-Service:/code
    networks:
      - backnet
    expose:
      - 8000
    ports:
      - 8000:8000
    depends_on:
      db:
        condition: service_healthy

#  nginx:
#    restart: always
#    build:
#      dockerfile: Dockerfile
#      context: ./nginx
#    ports:
#      - "80:80"
#    networks:
#      - backnet
#    depends_on:
#      - myapp
#      - frontend
#    volumes:
#      - ./nginx/nginx.conf:/etc/nginx/nginx.conf

volumes:
  db-data:


secrets:
  db-password:
    file: ./db/password.txt

networks:
  backnet:
